<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hello World</title><link>https://deadlysyn.com/blog/posts/</link><description>Recent content in Posts on Hello World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://deadlysyn.com/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS WAF Module</title><link>https://deadlysyn.com/blog/posts/aws-waf-module/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/aws-waf-module/</guid><description>Just released a Terraform module for AWS WAF. If you host &amp;ldquo;standard&amp;rdquo; web services (atop something Linux-like), this takes an opinionated approach to save you time while providing enough flexibility for common use cases.
module &amp;#34;waf&amp;#34; { source = &amp;#34;git::ssh://git@github.com/sonatype/terraform-aws-waf.git?ref=v0.0.1&amp;#34; association_arns = [module.foo.alb_arn] environment = var.environment name = var.name namespace = var.namespace tags = var.tags# these have caused problems for legitimate queries, YMMV common_ruleset_excludes = [ &amp;#34;GenericRFI_QUERYARGUMENTS&amp;#34;, &amp;#34;EC2MetaDataSSRF_QUERYARGUMENTS&amp;#34;, &amp;#34;EC2MetaDataSSRF_BODY&amp;#34;, &amp;#34;SizeRestrictions_BODY&amp;#34;, &amp;#34;CrossSiteScripting_QUERYARGUMENTS&amp;#34;, &amp;#34;NoUserAgent_HEADER&amp;#34; ] } Associate your ALB, API Gateway, etc.</description></item><item><title>Introducing Retriever</title><link>https://deadlysyn.com/blog/posts/retriever/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/retriever/</guid><description>The AWS SDK is great. Writing boilerplate for simple tasks is&amp;hellip; Well, you have better things to do.
Whether creating CLIs or services, one task I routinely encounter is secrets management. With AWS, I might use Secrets Manager (advanced features such as versioning simplify programmatic rotation) or Parameter Store (cost savings at scale, works great for injecting container environment).
I find myself repeating boilerplate (load configuration, create client, retrieve secret):</description></item><item><title>Go Datadog Client</title><link>https://deadlysyn.com/blog/posts/datadog-client/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/datadog-client/</guid><description>I recently found myself wrapping ChatOps around a CI/CD pipeline to manage scheduled downtime in DataDog (avoiding SLO impact for planned work). For astute readers wondering why this wasn&amp;rsquo;t a direct API call &amp;ndash; I tend to (ab)use CI as a generic task runner (has an API, secret store, etc).
I wanted to identify resources using labels (team:foo, service:bar). Sounded simple enough. It&amp;rsquo;s been over a month, so things may have improved, but documentation and available clients provided numerous ways to manage downtime beside tags.</description></item><item><title>Keycloak IaC</title><link>https://deadlysyn.com/blog/posts/keycloak_iac/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/keycloak_iac/</guid><description>Keycloak is a flexible, open source, identify access and management solution (Red Hat SSO being the commercial variant). While there is a growing community, much information is focused on service integration.
After Terraforming supporting infrastructure, I wanted to share a &amp;ldquo;batteries included&amp;rdquo; project to quickly get anyone adopting Keycloak up and running. If you already use Keycloak, it may provide inspiration. If you find it lacking, please help extend it for the greater good.</description></item></channel></rss>