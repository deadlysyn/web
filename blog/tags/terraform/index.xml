<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>terraform on Hello World</title><link>https://deadlysyn.com/blog/tags/terraform/</link><description>Recent content in terraform on Hello World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://deadlysyn.com/blog/tags/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS WAF Module</title><link>https://deadlysyn.com/blog/posts/aws-waf-module/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/aws-waf-module/</guid><description>NOTE: This includes AWSManagedRulesKnownBadInputsRuleSet by default, which AWS updated to mitigate the recent Log4j issue (CVE-2021-44228).
Just released a Terraform module for AWS WAF. If you host &amp;ldquo;standard&amp;rdquo; web services (atop something Linux-like), this takes an opinionated approach to save you time while providing enough flexibility for common use cases.
module &amp;#34;waf&amp;#34; { source = &amp;#34;git::ssh://git@github.com/sonatype/terraform-aws-waf.git?ref=v0.0.1&amp;#34; association_arns = [module.foo.alb_arn] environment = var.environment name = var.name namespace = var.namespace tags = var.</description></item><item><title>Keycloak IaC</title><link>https://deadlysyn.com/blog/posts/keycloak_iac/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/keycloak_iac/</guid><description>Keycloak is a flexible, open source, identify access and management solution (Red Hat SSO being the commercial variant). While there is a growing community, much information is focused on service integration.
After Terraforming supporting infrastructure, I wanted to share a &amp;ldquo;batteries included&amp;rdquo; project to quickly get anyone adopting Keycloak up and running. If you already use Keycloak, it may provide inspiration. If you find it lacking, please help extend it for the greater good.</description></item><item><title>Automating ECS</title><link>https://deadlysyn.com/blog/posts/automating-ecs/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/automating-ecs/</guid><description>Clone the project repo to follow along&amp;hellip;
So far in this series we&amp;rsquo;ve learned the fundamentals of Amazon&amp;rsquo;s Elastic Container Service, containerized a simple Node.js application, and deployed it to the cloud. In the final article of this series, we&amp;rsquo;ll eliminate the toil of building and maintaining ECS infrastructure by automating everything we&amp;rsquo;ve learned using Terraform.
Container Definition Before diving into Terraform, the first thing we&amp;rsquo;ll need is a &amp;ldquo;container definition&amp;rdquo; to feed the aws_ecs_task_definition resource.</description></item><item><title>Squashing Bugs</title><link>https://deadlysyn.com/blog/posts/squashing-bugs/</link><pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/squashing-bugs/</guid><description>Clone the companion project to follow along&amp;hellip;
In a recent multi-part series on Terraforming a simple N-tier stack atop AWS, we provisioned a number of public and private subnets. We used CIDR ranges provided as input variables and the cidrsubnet function to automatically carve out smaller subnets based on the number of AZs in the target region.
As originally mentioned, this was an attempt to follow typical HA best practices (not having all resources in a single AZ) and meet RDS subnet group requirements.</description></item><item><title>Terraforming AWS: Part III</title><link>https://deadlysyn.com/blog/posts/terraforming-aws-part-iii/</link><pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/terraforming-aws-part-iii/</guid><description>Clone the companion project to follow along&amp;hellip;
So far in Part I and Part II of this series we have provisioned a multi-AZ network with custom VPC, subnets, internet gateway and routing tables then deployed highly-available, auto-scaling Linux servers using EC2 and ALB. Our multi-tier starter project only has one big piece remaining â€“ the database!
In the final part of this series we&amp;rsquo;ll explore AWS&amp;rsquo; Relational Database Service (RDS). More than simply moving your database to the cloud, RDS provides numerous DBaaS advantages including fault tolerance, automated backups, and easy upgrades.</description></item><item><title>Terraforming AWS: Part II</title><link>https://deadlysyn.com/blog/posts/terraforming-aws-part-ii/</link><pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/terraforming-aws-part-ii/</guid><description>Clone the companion project to follow along&amp;hellip;
In Part I of this series [/blog/posts/terraforming-aws-part-i], we worked through a lot of AWS fundamentals and bootstrapped a network including custom VPC, public and private subnets and route tables. Thanks to that foundation, this and subsequent parts will be able to focus on more condensed code and make quicker progress.
In this tutorial, we can move onto something more exciting: EC2 (Elastic Compute Cloud) and ALB (Application Load Balancing).</description></item><item><title>Terraforming AWS: Part I</title><link>https://deadlysyn.com/blog/posts/terraforming-aws-part-i/</link><pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/terraforming-aws-part-i/</guid><description>Clone the companion project to follow along&amp;hellip;
When you hear &amp;ldquo;Cloud Computing&amp;rdquo;, the first thing that likely comes to mind is Amazon Web Services. Aside from record reliability and one of the largest infrastructure footprints in the world, they provide a diverse service catalog serving as an erector set any engineer can use to build ready-made infrastructures.
Similarly, HashiCorp&amp;rsquo;s Terraform has become a staple of the DevOps toolbox. With a flexible DSL and diverse provider ecosystem supporting every major cloud provider, Terraform went from relative newcomer to ubiquitous automation standard within a few years.</description></item></channel></rss>