<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Hello World</title><link>https://deadlysyn.com/blog/tags/go/</link><description>Recent content in Go on Hello World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 23 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://deadlysyn.com/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS SDK Role Assumption</title><link>https://deadlysyn.com/blog/posts/aws-sdk-role-assumption/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/aws-sdk-role-assumption/</guid><description>Short and sweet reminder to future self&amp;hellip;
I previously mentioned we follow the AWS best practice of sandboxing teams or services in dedicated accounts. It&amp;rsquo;s such a common practice, most likely you do too. In turn, you use cross-account role assumption when accessing resources (ideally using aws-vault).
That&amp;rsquo;s all well and good for humans, but a common requirement is ensuring services leverage the same role assumption. The exact implementation will vary a bit depending on your language of choice, but thankfully the AWS SDK makes this easy.</description></item><item><title>Lean IAM Management</title><link>https://deadlysyn.com/blog/posts/lean-aws-iam/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/lean-aws-iam/</guid><description>Part of DevOps culture is avoiding tickets when automation can provide lower-friction alternatives. Similarly, the SRE mindset seeks to eliminate toil. We also know from experience that the most effective Agile teams are granted a high level of autonomy.
IAM is a routine stumbling block to autonomy. Teams need an &amp;ldquo;appropriate&amp;rdquo; level of access to do their job. That often turns into waiting on tickets, with another team twiddling bits to unblock development.</description></item><item><title>Beware of Shadows</title><link>https://deadlysyn.com/blog/posts/beware-of-shadows/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/beware-of-shadows/</guid><description>You&amp;rsquo;re a humble DevOps practitioner. You like Go because it&amp;rsquo;s beautifully C-like without requiring real smarts most modern DevOps tools are written in it. You&amp;rsquo;ve read Effective Go a few times, understand block scope and rely heavily on redeclaration.
One day you write this snippet (obfuscated to protect the guilty) which lints, compiles and passes all tests (clearly I could use better tests):
// in a caller far, far away... ctx := context.</description></item><item><title>Introducing Retriever</title><link>https://deadlysyn.com/blog/posts/retriever/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/retriever/</guid><description>The AWS SDK is great. Writing boilerplate for simple tasks is&amp;hellip; Well, you have better things to do.
Whether creating CLIs or services, one task I routinely encounter is secrets management. With AWS, I might use Secrets Manager (advanced features such as versioning simplify programmatic rotation) or Parameter Store (cost savings at scale, works great for injecting container environment).
I find myself repeating boilerplate (load configuration, create client, retrieve secret):</description></item><item><title>Go Datadog CLI</title><link>https://deadlysyn.com/blog/posts/go-datadog-cli/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/go-datadog-cli/</guid><description>I found myself wrapping ChatOps around a CI/CD pipeline to manage scheduled downtime in DataDog (avoiding SLO impact for planned work). For astute readers wondering why this wasn&amp;rsquo;t a direct API call; I tend to (ab)use CI as a generic task runner (has an API, secret store, etc).
I wanted to identify resources using labels (team:foo, service:bar). While this is a common use case and things have hopefully improved, CLIs available at the time provided numerous ways to manage downtime but lacked tag support.</description></item><item><title>Testing Infrastructure Code</title><link>https://deadlysyn.com/blog/posts/testing-infrastructure-automation/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/testing-infrastructure-automation/</guid><description>Clone and follow along in the project repository&amp;hellip;
If you&amp;rsquo;re part of the masses using Terraform (or OpenTofu), you&amp;rsquo;ve likely heard of Terratest. In the project&amp;rsquo;s own words, Terratest is a Go library that provides patterns and helper functions for testing infrastructure. Terratest can seem daunting since it requires writing Go. The good news is you only need a very small part of Go&amp;rsquo;s surface area, but have the option of using it to its full potential if you need to.</description></item></channel></rss>