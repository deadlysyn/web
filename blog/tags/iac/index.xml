<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iac on Hello World</title><link>https://deadlysyn.com/blog/tags/iac/</link><description>Recent content in iac on Hello World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://deadlysyn.com/blog/tags/iac/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS WAF Module</title><link>https://deadlysyn.com/blog/posts/aws-waf-module/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/aws-waf-module/</guid><description>NOTE: This includes AWSManagedRulesKnownBadInputsRuleSet by default, which AWS updated to mitigate the recent Log4j issue (CVE-2021-44228).
Just released a Terraform module for AWS WAF. If you host &amp;ldquo;standard&amp;rdquo; web services (atop something Linux-like), this takes an opinionated approach to save you time while providing enough flexibility for common use cases.
module &amp;#34;waf&amp;#34; { source = &amp;#34;git::ssh://git@github.com/sonatype/terraform-aws-waf.git?ref=v0.0.1&amp;#34; association_arns = [module.foo.alb_arn] environment = var.environment name = var.name namespace = var.namespace tags = var.</description></item><item><title>Keycloak IaC</title><link>https://deadlysyn.com/blog/posts/keycloak_iac/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/keycloak_iac/</guid><description>Keycloak is a flexible, open source, identify access and management solution (Red Hat SSO being the commercial variant). While there is a growing community, much information is focused on service integration.
After Terraforming supporting infrastructure, I wanted to share a &amp;ldquo;batteries included&amp;rdquo; project to quickly get anyone adopting Keycloak up and running. If you already use Keycloak, it may provide inspiration. If you find it lacking, please help extend it for the greater good.</description></item><item><title>Automating ECS</title><link>https://deadlysyn.com/blog/posts/automating-ecs/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/automating-ecs/</guid><description>Clone the project repo to follow along&amp;hellip;
So far in this series we&amp;rsquo;ve learned the fundamentals of Amazon&amp;rsquo;s Elastic Container Service, containerized a simple Node.js application, and deployed it to the cloud. In the final article of this series, we&amp;rsquo;ll eliminate the toil of building and maintaining ECS infrastructure by automating everything we&amp;rsquo;ve learned using Terraform.
Container Definition Before diving into Terraform, the first thing we&amp;rsquo;ll need is a &amp;ldquo;container definition&amp;rdquo; to feed the aws_ecs_task_definition resource.</description></item></channel></rss>