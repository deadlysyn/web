<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Oss on Hello World</title><link>https://deadlysyn.com/blog/tags/oss/</link><description>Recent content in Oss on Hello World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 16 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://deadlysyn.com/blog/tags/oss/index.xml" rel="self" type="application/rss+xml"/><item><title>Lean IAM Management</title><link>https://deadlysyn.com/blog/posts/lean-aws-iam/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/lean-aws-iam/</guid><description>Part of DevOps culture is avoiding tickets when automation can provide lower-friction alternatives. Similarly, the SRE mindset seeks to eliminate toil. We also know from experience that the most effective Agile teams are granted a high level of autonomy.
IAM is a routine stumbling block to autonomy. Teams need an &amp;ldquo;appropriate&amp;rdquo; level of access to do their job. That often turns into waiting on tickets, with another team twiddling bits to unblock development.</description></item><item><title>AWS WAF Module</title><link>https://deadlysyn.com/blog/posts/aws-waf-module/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/aws-waf-module/</guid><description>NOTE: This includes AWSManagedRulesKnownBadInputsRuleSet by default, which AWS updated to mitigate the recent Log4j issue (CVE-2021-44228).
Just released a Terraform module for AWS WAF. If you host &amp;ldquo;standard&amp;rdquo; web services (atop something Linux-like), this takes an opinionated approach to save you time while providing enough flexibility for common use cases.
module &amp;#34;waf&amp;#34; { source = &amp;#34;git::ssh://git@github.com/sonatype/terraform-aws-waf.git?ref=v0.0.1&amp;#34; association_arns = [module.foo.alb_arn] environment = var.environment name = var.name namespace = var.namespace tags = var.</description></item><item><title>Introducing Retriever</title><link>https://deadlysyn.com/blog/posts/retriever/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/retriever/</guid><description>The AWS SDK is great. Writing boilerplate for simple tasks is&amp;hellip; Well, you have better things to do.
Whether creating CLIs or services, one task I routinely encounter is secrets management. With AWS, I might use Secrets Manager (advanced features such as versioning simplify programmatic rotation) or Parameter Store (cost savings at scale, works great for injecting container environment).
I find myself repeating boilerplate (load configuration, create client, retrieve secret):</description></item><item><title>Go Datadog CLI</title><link>https://deadlysyn.com/blog/posts/go-datadog-cli/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/go-datadog-cli/</guid><description>I found myself wrapping ChatOps around a CI/CD pipeline to manage scheduled downtime in DataDog (avoiding SLO impact for planned work). For astute readers wondering why this wasn&amp;rsquo;t a direct API call; I tend to (ab)use CI as a generic task runner (has an API, secret store, etc).
I wanted to identify resources using labels (team:foo, service:bar). While this is a common use case and things have hopefully improved, CLIs available at the time provided numerous ways to manage downtime but lacked tag support.</description></item><item><title>Keycloak IaC</title><link>https://deadlysyn.com/blog/posts/keycloak-iac/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/keycloak-iac/</guid><description>Keycloak is a flexible, open source, identify access and management solution (Red Hat SSO being the commercial variant). While there is a growing community, much information is focused on service integration.
After Terraforming supporting infrastructure, I wanted to share a &amp;ldquo;batteries included&amp;rdquo; project to quickly get anyone adopting Keycloak up and running. If you already use Keycloak, it may provide inspiration. If you find it lacking, please help extend it for the greater good.</description></item><item><title>Terraformer Intro</title><link>https://deadlysyn.com/blog/posts/terraformer-intro/</link><pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/terraformer-intro/</guid><description>Terraform has become the lingua franca of DevOps. As Terraform&amp;rsquo;s popularity grew, the surrounding ecosystem matured to help solve common challenges. Two great examples are Terratest which provides a modular testing framework for your IaC, and Terraformer which helps you quickly get existing infrastructure managed by Terraform. In the project&amp;rsquo;s own words, Terraformer is reverse terraform. It provides a CLI tool to generate terraform files from existing infrastructure. Let&amp;rsquo;s see it in action&amp;hellip;</description></item><item><title>Lock Down</title><link>https://deadlysyn.com/blog/posts/lock-down/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/lock-down/</guid><description>The old days of throwing up a CGI app protected by an .htpasswd file are long gone. While you could still do it, more sophisticated apps serving increasingly demanding users will have requirements that make it untenable.
For example, what if you have a suite of apps and don&amp;rsquo;t want users to have to login again for each one? What if you don&amp;rsquo;t want to manage all those .htpasswd files, or users want to login with their existing social identities?</description></item></channel></rss>