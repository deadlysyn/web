<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containers on Hello World</title><link>https://deadlysyn.com/blog/tags/containers/</link><description>Recent content in Containers on Hello World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 04 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://deadlysyn.com/blog/tags/containers/index.xml" rel="self" type="application/rss+xml"/><item><title>ECS Task Definitions</title><link>https://deadlysyn.com/blog/posts/ecs-task-definitions/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/ecs-task-definitions/</guid><description>Clone the project repo to follow along&amp;hellip;
In the first two parts of our multi-part series on shipping containerized Node.js apps using the AWS Elastic Container Service, we looked at how to Dockerize our app and get it ready to ship by using the Elastic Container Registry. This time we&amp;rsquo;re going to dive into an essential piece of ECS-specific configuration known as Task Definitions. Like anything new, this may seem daunting at first&amp;hellip; but with a little exploration we&amp;rsquo;ll gain enough knowledge to start feeling comfortable.</description></item><item><title>Contain Yourself</title><link>https://deadlysyn.com/blog/posts/contain-yourself/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/contain-yourself/</guid><description>Clone the project repo to follow along&amp;hellip;
In part one of this series we walked through using Docker to containerize a simple Node.js app and verified our shiny new container worked as expected. Unfortunately, containers aren&amp;rsquo;t much use if we can&amp;rsquo;t get them deployed to start delighting users with the sheer awesomeness of our brilliant code.
In the container world, the path to production involves some sort of registry&amp;hellip; While it sounds fancy, a registry isn&amp;rsquo;t much different from the simple web servers you historically used to host RPMs or DEBs (essentially just another tool to help you maintain the ITIL concept of a Definitive Software Library.</description></item><item><title>Thinking Inside the Box</title><link>https://deadlysyn.com/blog/posts/thinking-inside-the-box/</link><pubDate>Sun, 08 Mar 2020 00:00:00 +0000</pubDate><guid>https://deadlysyn.com/blog/posts/thinking-inside-the-box/</guid><description>Clone the project repo to follow along&amp;hellip;
This is going to be another multi-part series&amp;hellip; I don&amp;rsquo;t want to get too far ahead of myself, but the end goal is shipping a Node.js app using Amazon Web Service&amp;rsquo;s Elastic Container Service (ECS). We have to crawl before we can walk (or run an app), so this first article will cover the basics of getting a simple Node app containerized (feel free to plug in whatever app you want).</description></item></channel></rss>